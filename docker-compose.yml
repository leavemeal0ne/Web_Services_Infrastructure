version: '3.9'
services:
  postgres_db:
    container_name: ${CONTAINER_NAME}
    image: postgres:16-alpine
    env_file:
      - configs/db.env
    volumes:
      - lab4_db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
  app:
    container_name: app
    build:
      dockerfile: dockerfiles/Dockerfile
      context: .
    ports:
      - "8080:8080"
    depends_on:
      postgres_db:
        condition: service_healthy
      mongo:
        condition: service_started
    restart: on-failure
  migrate:
    env_file:
      - configs/db.env
    image: migrate/migrate:latest
#    profiles: [ "tools" ]
    volumes:
      - ./migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CONTAINER_NAME}/${POSTGRES_DB}?sslmode=disable",
      ]
    command: [ "up" ]
    depends_on:
      postgres_db:
        condition: service_healthy
    restart: on-failure
  frontend:
    build: ./ui
    container_name: frontend
    restart: on-failure
    ports:
      - "80:80"
    depends_on:
      - app
  mongo:
    image: mongo:7.0.4
    container_name: mongodb
    restart: on-failure
    env_file:
      - configs/db.env
    volumes:
      - lab4_mongodb_data:/data/db
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: on-failure
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongodb

volumes:
  lab4_db_data:
  lab4_mongodb_data: